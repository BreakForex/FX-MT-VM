# .configrc: invoked by bash(1)
#
# Initialize variables.
set -e
SCR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
ROOT="$(cd "$SCR" && git rev-parse --show-toplevel 2> /dev/null || echo "$SCR/..")"

# Handle bash errors. Exit on error. Trap exit.
# Trap normal exit signal (exit on all errors).
trap onexit EXIT
# Trap non-normal exit signals: 1/HUP, 2/INT, 3/QUIT, 15/TERM, ERR (9/KILL cannot be trapped).
trap onerror 1 2 3 15 ERR
# Activate trace when expected.
[ "$TRACE" ] && set -x

# Determine platform paths.
OUT="/opt"
CONF_TEST="mt4-tester.ini"
CONF_TERM="terminal.ini"
CONF_LAST="lastparameters.ini"
CONF_EA="ea.ini"
CONF_CUSTOM="custom.ini"
TPL_TEST="$ROOT/conf/$CONF_TEST"
TPL_TERM="$ROOT/conf/$CONF_TERM"
TPL_EA="$ROOT/conf/$CONF_EA"
TERMINAL_EXE="$(find ~ "$OUT" -name terminal.exe -print -quit)"
TERMINAL_DIR="$(dirname "$TERMINAL_EXE")"
TERMINAL_INI="$TERMINAL_DIR/config/$CONF_TERM"
TESTER_INI="$TERMINAL_DIR/config/$CONF_TEST"
TESTER_DIR="$TERMINAL_DIR/tester"
HISTORY_DIR="$TERMINAL_DIR/history/default"
TICKDATA_DIR="$TERMINAL_DIR/tester/history"
TERMINAL_LOG="$TESTER_DIR/logs/terminal.log"
LASTPARAM_INI="$TESTER_DIR/$CONF_LAST"
CUSTOM_INI="$TESTER_DIR/$CONF_CUSTOM"
CUSTOM_LOG="$TESTER_DIR/logs/backtest.log"

## Define common functions. ##

# Configure display and wine.
configure_display() {
  export DISPLAY=:0.0 # Select screen 0.
  export WINEDLLOVERRIDES="mscoree,mshtml=" # Disable gecko in wine.
  export WINEDEBUG="warn-all,fixme-all,alsa-all,ole-all,toolbar-all" # For debugging, try: WINEDEBUG=trace+all
  xdpyinfo -display $DISPLAY > /dev/null || Xvfb $DISPLAY -screen 0 1024x768x16 &
}

# Display recent logs.
show_logs() {
  find "$TERMINAL_DIR" -name "*.log" $VPRINT -exec tail -n20 "{}" +
}

# Clean files.
clean_files() {
  # Remove previous log, dat, txt and htm files.
  echo "Cleaning previous test data..." >&2
  find "$TESTER_DIR" '(' -name "*.htm" -o -name "*.txt" ')' $VPRINT -delete
  find "$TESTER_DIR/files" -type f $VPRINT -delete
  find "$TERMINAL_DIR" '(' -name "*.log" -o -name "Report*.htm" -o -name "*.gif" ')' $VPRINT -delete
}

# Delete backtest data files.
clean_bt() {
  # Remove previous backtest files.
  echo "Cleaning backtest data..." >&2
  find "$TERMINAL_DIR" '(' -name "*.hst" -o -name "*.fxt" ')' $VPRINT -delete
}

# Set input value in the SET file.
input_set() {
  local value
  key="$1"
  value="$2"
  file="${3:-$(echo $TESTER_DIR/$SETFILE)}"
  vargs="-u NONE"
  [ -f "$file" ]
  [ "$VERBOSE" ] && vargs+=" -V1"
  if [ ! -z "$value" ]; then
    echo "Setting '$key' to '$value' in $(basename "$file")" >&2
    ex +"%s/$key=\zs.*$/$value/" -scwq $vargs "$file"
  else
    echo "Value for '$key' is empty, ignoring."
  fi
}

# Get input value from the SET file.
input_get() {
  local value
  key="$1"
  value="$2"
  file="${3:-$(echo $TESTER_DIR/$SETFILE)}"
  vargs="-u NONE"
  [ -f "$file" ]
  value="$(grep -om1 "$key=[.0-9a-zA-Z-]\+" "$file" | cut -d= -f2-)"
  echo $value
}

# Set value in the INI file.
ini_set() {
  local value
  key="$1"
  value="$2"
  file="${3:-$(echo $TESTER_INI)}"
  vargs="-u NONE"
  [ -f "$file" ]
  [ "$VERBOSE" ] && vargs+=" -V1"
  if [ ! -z "$value" ]; then
    echo "Setting '$key' to '$value' in $(basename "$file")" >&2
    ex +'%s#'"$key"'=\zs.*$#'"$value"'#' -scwq $vargs "$file" || echo "$key=$value" >> "$file"
  else
    echo "Value for '$key' is empty, ignoring."
  fi
}

# Set inputs in the EA INI file.
ini_set_inputs() {
  local value
  sfile="${1:-$(echo $TESTER_DIR/$SETFILE)}"
  dfile="${2:-$(echo $EA_INI)}"
  vargs="-u NONE"
  [ -f "$sfile" ]
  [ -f "$dfile" ]
  [ "$VERBOSE" ] && vargs+=" -V1"
  echo "Setting values from set file ($SETFILE) into in $(basename "$dfile")" >&2
  ex +'%s#<inputs>\zs\_.\{-}\ze</inputs>#\=insert(readfile("'"$sfile"'"), "")#' -scwq $vargs "$dfile"
}

# Get value from the INI/HTM file.
ini_get() {
  local value
  key="$1"
  file="${2:-$(echo $TESTER_INI)}"
  value="$(grep -om1 "$key=[ ./0-9a-zA-Z_-]\+" "$file" | cut -d= -f2-)"
  echo "Getting '$key' from $(basename "$file"): $value" >&2
  echo $value
}

# Set tag value in the file.
tag_set() {
  local value
  key="$1"
  value="$2"
  file="${3:-$(echo $INCLUDE)}"
  vargs="-u NONE"
  [ -f "$file" ]
  [ "$VERBOSE" ] && vargs+=" -V1"
  if [ ! -z "$value" ]; then
    echo "Setting '$key' to '$value' in $(basename "$file")" >&2
    ex +"%s/\$$key:\zs.*\$$/ ${value}h$/" -scwq $vargs "$file"
  else
    echo "Value for '$key' is empty, ignoring."
  fi
}

# Get all values from the INI/HTM file.
get_values() {
  file="$1"
  grep -o '\S\+[^_]=[^;]\+' "$file"
}

# Get time from terminal log in h.
get_time() {
  MTIME=$(grep -o "^real[^m]\+" "$TERMINAL_LOG" | cut -f 2)
  echo $MTIME
}

# Save time and store in rule file if exists.
save_time() {
  HTIME=$(($(eval get_time) / 60))
  [ "$VERBOSE" ] && echo "ETA: $((get_time / 60))h" >&2
  [ -f "$INCLUDE" ] && tag_set ETA $HTIME "$INCLUDE"
}

# Detect and configure proxy.
configure_proxy() {
  GW=$(netstat -rn | grep "^0.0.0.0 " | cut -d " " -f10)
  curl -s localhost:3128 > /dev/null || true && export http_proxy="http://localhost:3128"
  curl -s $GW:3128       > /dev/null || true && export http_proxy="http://$GW:3128"

  # Set proxy for wine registry if present.
  [ "$http_proxy" ] &&
  cat << EOF | wine regedit -
  Regedit4
  [HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings]
  "MigrateProxy"=dword:00000001
  "ProxyEnable"=dword:00000001
  "ProxyHttp1.1"=dword:00000001
  "ProxyServer"="$http_proxy"
  "ProxyOverride"="<local>"
EOF
}

## Kill  the currently running wineserver.
kill_wine() {
  (wineserver -k || true)
}

# Show simple stack trace.
show_trace() {
  while caller $((n++)); do :; done; >&2
}

#--- onexit()
##  @param $1 integer  (optional) Exit status. If not set, use '$?'
onexit() {
  local exit_status=${1:-$?}
  kill_wine
  set +x
  echo "Exiting $0 with $exit_status" >&2
  exit $exit_status
}

#--- onerror()
##  @param $1 integer  (optional) Exit status. If not set, use '$?'
onerror() {
  local exit_status=${1:-$?}
  local frame=0
  set +x
  echo "ERROR: Exiting $0 with $exit_status" >&2
  show_trace
  exit $exit_status
}
