# .configrc: invoked by bash(1)
#
# Initialize variables.
set -ex
SCR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
ROOT="$(cd "$SCR" && git rev-parse --show-toplevel 2> /dev/null || echo "$SCR/..")"

# Handle bash errors. Exit on error. Trap exit.
# Trap normal exit signal (exit on all errors).
trap onexit EXIT
# Trap non-normal exit signals: 1/HUP, 2/INT, 3/QUIT, 15/TERM, ERR (9/KILL cannot be trapped).
trap onerror 1 2 3 15 ERR

# Determine platform paths.
OUT="/opt"
CONF_TEST="mt4-tester.ini"
CONF_TERM="terminal.ini"
TPL_TEST="$ROOT/conf/$CONF_TEST"
TPL_TERM="$ROOT/conf/$CONF_TERM"
TERMINAL_EXE="$(find ~ "$OUT" -name terminal.exe -print -quit)"
TERMINAL_DIR="$(dirname "$TERMINAL_EXE")"
TERMINAL_INI="$TERMINAL_DIR/config/$CONF_TERM"
TESTER_INI="$TERMINAL_DIR/config/$CONF_TEST"
TESTER_DIR="$TERMINAL_DIR/tester"

# Configure display and wine.
export DISPLAY=:0.0 # Select screen 0.
export WINEDLLOVERRIDES="mscoree,mshtml=" # Disable gecko in wine.
export WINEDEBUG="warn-all,fixme-all,alsa-all,ole-all" # For debugging, try: WINEDEBUG=trace+all
set +x
xdpyinfo -display $DISPLAY || Xvfb $DISPLAY -screen 0 1024x768x16 &

# Define common functions.
show_logs() {
  echo "Printing logs..." >&2
  find "$TERMINAL_DIR" '(' -name "*.log" -o -name "*.txt" ')' -print -exec tail "{}" ';'
}

clean_files() {
  # Remove previous log, dat, txt and htm files.
  echo "Cleaning previous data..." >&2
  find "$TERMINAL_DIR" '(' -name "*.log"  -o -name "*.txt" -o -name "*.htm" -o -name "*.gif" ')' -print -delete
}

# Delete backtest data files.
clean_bt() {
  # Remove previous backtest files.
  echo "Cleaning backtest data..." >&2
  find "$TERMINAL_DIR" '(' -name "*.hst"  -o -name "*.fxt" ')' -print -delete
}

input_set() {
  key="$1"
  value="$2"
  file="${3:-$(echo "$TESTER_DIR/$SETFILE")}"
  [ -s "$file" ] &&
  ex +"%s/$key=\zs.*$/$value/" -scwq "$file"
}

# Set value in the file.
ini_set() {
  key="$1"
  value="$2"
  file="${3:-$(echo $TESTER_INI)}"
  echo "Setting '$key' to '$value' in $(basename "$file")" >&2
  [ -s "$file" ] &&
  ex +"%s/$key=\zs.*$/$value/" -scwq "$file"
}

# Get value in the file.
ini_get() {
  key="$1"
  file="${2:-$(echo $TESTER_INI)}"
  value="$(grep -w "$key" "$file" | cut -d= -f2-)"
  echo "Getting '$key' from $(basename "$file"): $value" >&2
  echo $value
}

# Detect and configure proxy.
configure_proxy() {
  GW=$(netstat -rn | grep "^0.0.0.0 " | cut -d " " -f10)
  curl -s localhost:3128 > /dev/null || true && export http_proxy="http://localhost:3128"
  curl -s $GW:3128       > /dev/null || true && export http_proxy="http://$GW:3128"

  # Set proxy for wine registry if present.
  [ "$http_proxy" ] &&
  cat << EOF | wine regedit -
  Regedit4
  [HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings]
  "MigrateProxy"=dword:00000001
  "ProxyEnable"=dword:00000001
  "ProxyHttp1.1"=dword:00000001
  "ProxyServer"="$http_proxy"
  "ProxyOverride"="<local>"
EOF
}

## Kill  the currently running wineserver.
kill_wine() {
  (wineserver -k || true)
}

# Show simple stack trace.
show_trace() {
  while caller $((n++)); do :; done; >&2
}

#--- onexit()
##  @param $1 integer  (optional) Exit status. If not set, use `$?'
onexit() {
  local exit_status=${1:-$?}
  kill_wine
  set +x
  echo "Exiting $0 with $exit_status" >&2
  exit $exit_status
}

#--- onerror()
##  @param $1 integer  (optional) Exit status. If not set, use `$?'
onerror() {
  local exit_status=${1:-$?}
  local frame=0
  set +x
  echo "ERROR: Exiting $0 with $exit_status" >&2
  show_trace
  exit $exit_status
}
