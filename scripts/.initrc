#!/usr/bin/env bash
# .initrc file
#
# Initialize variables.
SCR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
ROOT="$(cd "$SCR" && git rev-parse --show-toplevel 2> /dev/null || echo "$SCR/..")"

# Handle bash errors. Exit on error. Trap exit.
# Trap normal exit signal (exit on all errors).
trap onexit EXIT
# Trap non-normal exit signals: 1/HUP, 2/INT, 3/QUIT, 15/TERM, ERR (9/KILL cannot be trapped).
trap onerror 1 2 3 15 ERR
# Activate trace on demand.
echo "Initializing... (args: $*)"
[ "$TRACE" ] && set -x
[ ! "$NOFAIL" ] && set -e
set -e

# Determine platform paths.
OUT="/opt"
CONF_TEST="mt4-tester.ini"
CONF_TERM="terminal.ini"
CONF_LAST="lastparameters.ini"
CONF_EA="ea.ini"
CONF_CUSTOM="custom.ini"
TPL_TEST="$ROOT/conf/$CONF_TEST"
TPL_TERM="$ROOT/conf/$CONF_TERM"
TPL_EA="$ROOT/conf/$CONF_EA"
TERMINAL_EXE="$(find ~ "$OUT" -name terminal.exe -print -quit)"
MTEDITOR_EXE="$(find ~ "$OUT" -name metaeditor.exe -print -quit)"
TERMINAL_DIR="$(dirname "$TERMINAL_EXE")"
TERMINAL_INI="$TERMINAL_DIR/config/$CONF_TERM"
TESTER_INI="$TERMINAL_DIR/config/$CONF_TEST"
TESTER_DIR="$TERMINAL_DIR/tester"
HISTORY_DIR="$TERMINAL_DIR/history/default"
DOWNLOAD_DIR="$TERMINAL_DIR/history/downloads"
TICKDATA_DIR="$TERMINAL_DIR/tester/history"
TERMINAL_LOG="$TESTER_DIR/logs/terminal.log"
LASTPARAM_INI="$TESTER_DIR/$CONF_LAST"
CUSTOM_INI="$TESTER_DIR/$CONF_CUSTOM"
CUSTOM_LOG="$TESTER_DIR/logs/backtest.log"
LOG_DIR="$TERMINAL_DIR/MQL4/Logs"
EXPERTS_DIR="MQL4/Experts"
SCRIPTS_DIR="MQL4/Scripts"

# Set constants.
TRUE=0
FALSE=1
FXT_OFF_SPREAD="FC"
SRAW_OFF_DIGITS=$(printf "%02x" 104)

## Define common functions. ##

# Init shell settings.
initialize() {
  shopt -s expand_aliases
}

# Configure display and wine.
configure_display() {
  export DISPLAY=:0.0 # Select screen 0.
  export WINEDLLOVERRIDES="mscoree,mshtml=" # Disable gecko in wine.
  export WINEDEBUG="warn-all,fixme-all,err-alsa,-ole,-toolbar" # For debugging, try: WINEDEBUG=trace+all
  xdpyinfo -display $DISPLAY > /dev/null || Xvfb $DISPLAY -screen 0 1024x768x16 &
}

# Display recent logs.
show_logs() {
  find "$TERMINAL_DIR" -name "*.log" $VPRINT -exec tail -n20 "{}" +
}

# Check logs for specific text.
check_logs() {
  filter="$1"
  find "$TERMINAL_DIR" -name "*.log" $VPRINT -exec grep --color -C1 -iw "$filter" "{}" +
}

# Clean files.
clean_files() {
  # Remove previous log, dat, txt and htm files.
  echo "Cleaning previous test data..." >&2
  find "$TESTER_DIR" '(' -name "*.htm" -o -name "*.txt" ')' -type f $VPRINT -delete
  find "$TESTER_DIR/files" -type f $VPRINT -delete
  # Remove log files.
  find "$TERMINAL_DIR" '(' -name "*.log" -o -name "Report*.htm" -o -name "*.gif" ')' -type f $VPRINT -delete
  # Remove selected symbol and group files, so they can be regenerated.
  find "$HISTORY_DIR" '(' -name "symbols.sel" -o -name "symgroups.raw" ')' $VPRINT -delete
}

# Delete backtest data files.
clean_bt() {
  # Remove previous backtest files.
  echo "Cleaning backtest data..." >&2
  find "$TERMINAL_DIR" '(' -name "*.hst" -o -name "*.fxt" ')' $VPRINT -delete
}

# Set input value in the SET file.
input_set() {
  local key="$1"
  local value="$2"
  local file="${3:-$(echo $TESTER_DIR/$SETFILE)}"
  local vargs="-u NONE"
  [ -f "$file" ]
  [ "$VERBOSE" ] && vargs+=" -V1"
  if [ ! -z "$value" ]; then
    echo "Setting '$key' to '$value' in $(basename "$file")" >&2
    ex +"%s/$key=\zs.*$/$value/" -scwq $vargs "$file"
  else
    echo "Value for '$key' is empty, ignoring."
  fi
}

# Get input value from the SET file.
input_get() {
  local key="$1"
  local value="$2"
  local file="${3:-$(echo $TESTER_DIR/$SETFILE)}"
  local vargs="-u NONE"
  [ -f "$file" ]
  value="$(grep -om1 "$key=[.0-9a-zA-Z-]\+" "$file" | cut -d= -f2-)"
  echo $value
}

# Set value in the INI file.
ini_set() {
  local key="$1"
  local value="$2"
  local file="${3:-$(echo $TESTER_INI)}"
  local vargs="-u NONE"
  [ -f "$file" ]
  [ "$VERBOSE" ] && vargs+=" -V1"
  if [ ! -z "$value" ]; then
    echo "Setting '$key' to '$value' in $(basename "$file")" >&2
    ex +'%s#'"$key"'=\zs.*$#'"$value"'#' -scwq $vargs "$file" || echo "$key=$value" >> "$file"
  else
    echo "Value for '$key' is empty, ignoring."
  fi
}

# Set inputs in the EA INI file.
ini_set_inputs() {
  local sfile="${1:-$(echo $TESTER_DIR/$SETFILE)}"
  local dfile="${2:-$(echo $EA_INI)}"
  local vargs="-u NONE"
  [ -f "$sfile" ]
  [ -f "$dfile" ]
  [ "$VERBOSE" ] && vargs+=" -V1"
  echo "Setting values from set file ($SETFILE) into in $(basename "$dfile")" >&2
  ex +'%s#<inputs>\zs\_.\{-}\ze</inputs>#\=insert(readfile("'"$sfile"'"), "")#' -scwq $vargs "$dfile"
}

# Get value from the INI/HTM file.
ini_get() {
  local key="$1"
  local file="${2:-$(echo $TESTER_INI)}"
  local value="$(grep -om1 "$key=[ ./0-9a-zA-Z_-]\+" "$file" | cut -d= -f2-)"
  echo "Getting '$key' from $(basename "$file"): $value" >&2
  echo $value
}

# Set tag value in the file.
tag_set() {
  local key="$1"
  local value="$2"
  local file="${3:-$(echo $INCLUDE)}"
  local vargs="-u NONE"
  [ -f "$file" ]
  [ "$VERBOSE" ] && vargs+=" -V1"
  if [ ! -z "$value" ]; then
    echo "Setting '$key' to '$value' in $(basename "$file")" >&2
    ex +"%s/\$$key:\zs.*\$$/ ${value}h$/" -scwq $vargs "$file"
  else
    echo "Value for '$key' is empty, ignoring." >&2
  fi
}

# Get all values from the INI/HTM file.
get_values() {
  local file="$1"
  grep -o '\S\+[^_]=[^;]\+' "$file"
}

# Read decimal value at given offset from the file.
# Usage: read_value (file) (hex-offset)
read_value() {
  local file=$1
  local offset=$((16#$2))
  [ -n "$file" ]
  [ -n "$offset" ]
  echo $((16#$(xxd -p -l1 -s $offset "$file")))
}

# Read bytes in hex format at given offset from the file.
# Usage: read_data file.bin (offset) (count)
read_data() {
  local file="$1"
  local offset="$2"
  local count="$3:-1"
  xxd -p -l $count -s $offset "$file"
}

# Modify binary file given value in hex format at given offset.
# Usage: write_data file.bin (hex-values) (hex-offset)
# E.g. write_data file.bin $(printf "%02x\n" 123) "FC"
write_data() {
  local file="$1"
  local value="$2" # In hex format.
  local offset="$3"
  local len="${4:-1}"
  local writable=$(test -w "$file"; echo $?)
  [ -n "$file" ]
  [ -n "$value" ]
  [ -n "$offset" ]
  [ $writable = $FALSE ] && chmod $VFLAG u+w "$file"
  echo "$offset: $value"
  xxd -r - "$file" <<<"$offset: $value"
  [ $writable = $FALSE ] && chmod $VFLAG u-w "$file"
}

# Set spread in ini and FXT files.
# Usage: set_spread 10
set_spread() {
  local spread=$1
  [ -n "$spread" ]
  ini_set "^Spread" "$SPREAD" "$TERMINAL_INI"
  ini_set "^TestSpread" "$SPREAD" "$TESTER_INI"
  # Change spread in all FXT files at offset 0xFC.
  find "$TICKDATA_DIR" -type f -iname "*.fxt" -print0 | while IFS= read -r -d $'\0' file; do
      base=$(basename "$file")
      prev_spread=$(read_value "$file" $FXT_OFF_SPREAD)
      write_data "$file" $(printf "%02x\n" $spread) $FXT_OFF_SPREAD
      next_spread=$(read_value "$file" $FXT_OFF_SPREAD)
      echo "Changed spread in $base from $prev_spread into $next_spread" >&2
      [ $spread != $next_spread ] && { echo "Failed to set the correct spread." >&2; exit 1; }
  done || true
}

# Change values in symbols file.
# Usage: get_symbol_value (hex-offset)
get_symbol_value() {
  local rel_offset=$((16#$1))
  local file="$HISTORY_DIR/symbols.raw"
  local symbol_offset=$(xxd -g1 -c 121 "$file" | grep -w ${SYMBOL:-EURUSD} | grep -o "^[^:]\+")
  local abs_offset="$(( $((16#$symbol_offset)) + $rel_offset))"
  echo $(read_value "$file" $abs_offset)
}

# Change values in symbols file.
# Usage: set_symbol_value (dec-value) (hex-offset)
set_symbol_value() {
  local value=$(printf "%02x" $1)
  local rel_offset=$((16#$2))
  local file="$HISTORY_DIR/symbols.raw"
  local symbol_offset=$(xxd -g1 -c 121 "$file" | grep -w ${SYMBOL:-EURUSD} | grep -o "^[^:]\+")
  local abs_offset="$(( $((16#$symbol_offset)) + $rel_offset))"
  write_data "$file" $value $(printf "%02x" $abs_offset)
}

# Get time from terminal log in h.
get_time() {
  echo $(grep -o "^real[^m]\+" "$TERMINAL_LOG" | cut -f 2)
}

# Save time and store in rule file if exists.
save_time() {
  local htime=$(($(eval get_time) / 60))
  [ "$VERBOSE" ] && echo "ETA: $((get_time / 60))h" >&2
  [ -f "$INCLUDE" ] && tag_set ETA $htime "$INCLUDE"
}

# Set read permissions for test files.
set_read_perms() {
  # Make the backtest files read-only.
  echo "Setting read-only permissions for backtest files..." >&2
  find "$TERMINAL_DIR" '(' -name '*.fxt' -or -name '*.hst' ')' -print0 | xargs -0 chmod $VFLAG u-w
}

# Set write permissions for test files.
set_write_perms() {
  echo "Setting write permissions for backtest files..." >&2
  find "$TERMINAL_DIR" '(' -name '*.fxt' -or -name '*.hst' ')' -print0 | xargs -0 chmod $VFLAG u+w
}

# Detect and configure proxy.
configure_proxy() {
  local gw=$(netstat -rn | grep "^0.0.0.0 " | cut -d " " -f10)
  curl -s localhost:3128 > /dev/null || true && export http_proxy="http://localhost:3128"
  curl -s $gw:3128       > /dev/null || true && export http_proxy="http://$gw:3128"

  # Set proxy for wine registry if present.
  [ "$http_proxy" ] &&
  cat << EOF | wine regedit -
  Regedit4
  [HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings]
  "MigrateProxy"=dword:00000001
  "ProxyEnable"=dword:00000001
  "ProxyHttp1.1"=dword:00000001
  "ProxyServer"="$http_proxy"
  "ProxyOverride"="<local>"
EOF
}

# Copy ini settings from templates.
copy_ini() {
  # Copy the configuration file, so platform can find it.
  echo "Copying ini files..."
  cp $VFLAG "$TPL_TEST" "$TESTER_INI"
  cp $VFLAG "$TPL_TERM" "$TERMINAL_INI"
}

# Find EA file and return path.
find_ea() {
  file="$1"
  find "$ROOT" '(' -name "*$1*.mq?" -o -name "*$1*.ex?" ')' -print -quit
}

# Copy EA file given file path.
copy_ea() {
  local file="$1"
  [ ! -s "$file" ] && file=$(find_ea "$file")
  cp $VFLAG "$file" "$TERMINAL_DIR/$EXPERTS_DIR"/
}

# Copy script file given file path.
copy_script() {
  local file="$1"
  [ ! -s "$file" ] && file=$(find_ea "$file")
  cp $VFLAG "$file" "$TERMINAL_DIR/$SCRIPTS_DIR"/
}

# Compile given EA name.
compile_ea() {
  local name="$1"
  cd "$TERMINAL_DIR"
  wine metaeditor.exe ${@:2} /log /compile:"$EXPERTS_DIR/$name"
  cd -
}

# Compile given script name.
compile_script() {
  local name="$1"
  cd "$TERMINAL_DIR"
  wine metaeditor.exe ${@:2} /log /compile:"$SCRIPTS_DIR/$name"
  cd -
}

## Clean up.
clean_up() {
  kill_wine
# kill $$ $(jobs -p) # Kill any background jobs.
}

## Kill  the currently running wineserver.
kill_wine() {
  (wineserver -k || true)
}

# Show simple stack trace.
show_trace() {
  while caller $((n++)); do :; done; >&2
}

#--- onexit()
##  @param $1 integer  (optional) Exit status. If not set, use '$?'
onexit() {
  local exit_status=${1:-$?}
  clean_up
  set +x
  echo "Exiting $0 with $exit_status" >&2
  exit $exit_status
}

#--- onerror()
##  @param $1 integer  (optional) Exit status. If not set, use '$?'
onerror() {
  local exit_status=${1:-$?}
  local frame=0
  set +x
  echo "ERROR: Exiting $0 with $exit_status" >&2
  show_trace
  exit $exit_status
}

initialize
